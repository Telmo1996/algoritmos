INFORME P2 ALGORTIMOS: Ordenación por inserción y ordenacion shell.
Autores: Telmo Fernández Corujo, Anna Taboada Pardiñas y Andrés Pérez Comesaña.

En esta práctica vamos a implementar dos algoritmos de ordenación (sell e inserción) que van a operar sobre un vector v. Así mismo con una función test vamos a comprobar su correcto funcionamiento. Además vamos a obtener sus tiempos de ejecución en base al vector v que es un vector con valores int aleatorios generados con la función "aleatorio()", este vector v va a tener diferentes tamaños y situaciones(el vector ya está ordenado en orden ascendente(MEJOR CASO), el vector ya está ordenado pero en orden descendente(PEOR CASO) y el vector está inicialmente desordenado(CASO INTERMEDIO)).

Las especificaciones de la máquina que vamos a utilizar son las siguientes:
OS: Ubuntu 18.04.5 LTS x86_64 
Host: GL62M 7RDX REV:1.0 
Kernel: 5.4.0-48-generic 
Uptime: 4 hours, 15 mins 
Packages: 1922 
Shell: bash 4.4.20 
Resolution: 1920x1080 
DE: MATE 
WM: Metacity (Marco) 
WM Theme: Radiant-MATE-Aqua 
Theme: Radiant-MATE-Aqua [GTK2/3] 
Icons: Radiant-MATE-Aqua [GTK2/3] 
Terminal: mate-terminal 
Terminal Font: Ubuntu Mono 13 
CPU: Intel i5-7300HQ (4) @ 3.500GHz 
GPU: Intel Integrated Graphics 
GPU: NVIDIA GeForce GTX 1050 Mobile 
Memory: 2371MiB / 7880MiB

Las unidades de tiempo utilizadas en esta práctica son los microsegundos (us).

******************************************************************************************************************************************************************************************************************
ORDENACION SHELL

Este algoritmo recorre el vector, la primera vez de la mitad hasta el final, luego, la mitad de dicha mitad y asi sucesivamente hasta llegar a n.
Esto lo hará siempre, asi que la complejidad se verá afectada si tiene que hacer cambios en el vector para ordenarlo. La implementación es la siguiente:

void ord_shell(int v[], int n){
    int i, tmp, j, seguir;
    int incremento = n;
    while(1){
        incremento = incremento / 2;
        for (i=incremento; i<n; i++){
            tmp = v[i];
            j = i;
            seguir = 1;
            while (j-incremento > -1 && seguir){
                if (tmp < v[j-incremento]){
                    v[j] = v[j-incremento];
                    j = j-incremento;
                }else{
                    seguir = 0;
                }
            }
            v[j] = tmp;
        }
    
        if(incremento == 1) break;
    }
}

CASO ASCENDENTE (MEJOR CASO)
La complejidad en este caso sería n^1.12
Las cotas subestimada, ajustada y sobreestimada son:
	f(n)=n^1.02;
	g(n)=n^1.12; 
	h(n)=n^1.22;
La progresión geométrica es *2.
La constante a la que tiende la sucesión de la cota ajustada es 0.022.
El programa nos muestra por pantalla:

ascendente
                        SUBESTIMADA  AJUSTADA       SOBREESTIMADA
n	      t(n)		    t(n)/n^1.02	 t(n)/n^1.12	t(n)/n^1.22
500	    *   21.9600	    0.03878671	 0.02083464	    0.01119152	
1000	*   48.5800	    0.04231141	 0.02120594	    0.01062815	
2000	*  111.2600	    0.04778466	 0.02234526	    0.01044919	
4000	*  246.8400	    0.05227744	 0.02280911	    0.00995182	
8000	   528.0000	    0.05514195	 0.02244777	    0.00913827	
16000	  1166.0000	    0.06004767	 0.02280784	    0.00866308	
32000	  2513.0000	    0.06381746	 0.02261645	    0.00801511


CASO DESCENDENTE (PEOR CASO)
La complejidad en este caso sería n^1.14.
Las cotas subestimada, ajustada y sobreestimada son:
	f(n)=n^1.04;
	g(n)=n^1.14; 
	h(n)=n^1.24;

La progresión geométrica es *2.
La constante a la que tiende la sucesión de la cota ajustada es 0.025.
El programa nos muestra por pantalla:

descendente
                      SUBESTIMADA   AJUSTADA     SOBREESTIMADA
n	      t(n)		  t(n)/n^1.04	t(n)/n^1.14	 t(n)/n^1.24
500	    *   31.0300	  0.04840085	0.02599896	 0.01396558	
1000	*   69.8500	  0.05298664	0.02655623	 0.01330964	
2000	*  154.1200	  0.05685751	0.02658795	 0.01243317	
4000	*  344.5400	  0.06181548	0.02697064	 0.01176753	
8000	   709.0000	  0.06186324	0.02518394	 0.01025214	
16000	  1606.0000	  0.06814920	0.02588504	 0.00983188	
32000	  3479.0000	  0.07179570	0.02544389	 0.00901713


CASO ALEATORIO (CASO INTERMEDIO)
La comlejidad en este caso sería n^1.20.
Las cotas subestimada, ajustada y sobreestimada son:
	f(n)=n^1.10;
	g(n)=n^1.20; 
	h(n)=n^1.30;
La progresión geométrica es *2.
La constante a la que tiende la sucesión de la cota ajustada es 0.033.
El programa nos muestra por pantalla:
aleatorio
                      SUBESTIMADA   AJUSTADA     SOBREESTIMADA
n	      t(n)		  t(n)/n^1.10	t(n)/n^1.20	 t(n)/n^1.30
500	    *   57.9500	  0.06225675	0.03344178	 0.01796356	
1000	*  136.2200	  0.06827172	0.03421692	 0.01714908	
2000	*  316.1800	  0.07392671	0.03456992	 0.01616573	
4000	   743.0000	  0.08104436	0.03536037	 0.01542804	
8000	  1626.0000	  0.08274115	0.03368314	 0.01371209	
16000	  3654.0000	  0.08674342	0.03294766	 0.01251447	
32000	  8387.0000	  0.09288416	0.03291749	 0.01166572

******************************************************************************************************************************************************************************************************************
ORDENACIÓN POR INSERCIÓN
Este algoritmo consiste en ir comparando dos a dos viendo cual es mayor, si el de la izquierda es mayor se intercambia por el de su derecha y así sucesivamente, cumpliendo las condiciones aplicadas en esta implementación.

void ord_ins(int v[], int n){
    int i, x, j;

    for (i=1; i<n; i++){
        x = v[i];
        j = i-1;
        while(j>-1 && v[j]>=x){
            v[j+1] = v[j];
            j = j-1;
        }
        v[j+1] = x;
    }
}

CASO ASCENDENTE
La compejidad en este caso sería n^1.00.
Las cotas subestimada, ajustada y sobreestimada son:
	f(n)=n^0.90;
	g(n)=n^1.00; 
	h(n)=n^1.10;
La progresión geométrica es *2.
La constante a la que tiende la sucesión de la cota ajustada es 0.0065.
El programa nos muestra por pantalla:

ascendente
                       SUBESTIMADA  AJUSTADA     SOBREESTIMADA
n	    t(n)		   t(n)/n^0.90	t(n)/n^1.00	 t(n)/n^1.10
500	    *    1.7200	   0.00640406	0.00344000	 0.00184783	
1000	*    6.6700	   0.01330840	0.00667000	 0.00334292	
2000	*   12.8200	   0.01370759	0.00641000	 0.00299747	
4000	*   25.8200	   0.01479457	0.00645500	 0.00281637	
8000	*   52.2800	   0.01605294	0.00653500	 0.00266034	
16000	*  104.7600	   0.01723802	0.00654750	 0.00248693	
32000	*  205.7900	   0.01814635	0.00643094	 0.00227908


CASO DESCENDENTE
La compejidad en este caso sería n^2.00.
Las cotas subestimada, ajustada y sobreestimada son:
	f(n)=n^1.90;
	g(n)=n^2.00; 
	h(n)=n^2.10;
La progresión geométrica es *2.
La constante a la que tiende la sucesión de la cota ajustada es 0.0015.
El programa nos muestra por pantalla:

descendente
                        SUBESTIMADA  AJUSTADA      SOBREESTIMADA
n	      t(n)		    t(n)/n^1.90	 t(n)/n^2.00   t(n)/n^2.10
500	      *  381.7800	0.00284296	 0.00152712	   0.00082031	
1000	    1553.0000	0.00309864	 0.00155300	   0.00077834	
2000	    6277.0000	0.00335579	 0.00156925	   0.00073382	
4000	   24597.0000	0.00352345	 0.00153731	   0.00067074	
8000	   98939.0000	0.00379749	 0.00154592	   0.00062933	
16000	 412033.0000	0.00423744	 0.00160950	   0.00061134	
32000	 1557035.0000	0.00429055	 0.00152054	   0.00053887


CASO ALEATORIO
La compejidad en este caso sería n^2.00.
Las cotas subestimada, ajustada y sobreestimada son:
	f(n)=n^1.90;
	g(n)=n^2.00; 
	h(n)=n^2.10;
La progresión geométrica es *2.
La constante a la que tiende la sucesión de la cota ajustada es 0.00076.
El programa nos muestra por pantalla:

aleatorio
                        SUBESTIMADA  AJUSTADA      SOBREESTIMADA
n	      t(n)		    t(n)/n^1.90	 t(n)/n^2.00   t(n)/n^2.10
500	     *  192.2300	0.00143146	 0.00076892	   0.00041303	
1000	    809.0000	0.00161417	 0.00080900	   0.00040546	
2000	   2983.0000	0.00159476	 0.00074575	   0.00034873	
4000	  12425.0000	0.00177985	 0.00077656	   0.00033882	
8000	  47915.0000	0.00183908	 0.00074867	   0.00030478	
16000	 195942.0000	0.00201511	 0.00076540	   0.00029072	
32000	 765179.0000	0.00210852	 0.00074725	   0.00026482

******************************************************************************************************************************************************************************************
CONCLUSIÓN:

En el caso de estos algoritmos obtenemos mejores tiempos con el vector ordenado ascendentemente, después con el aleatorio y por último con el descendente. Esto es debido a la cantidad de iteraciones que el algoritmo debe hacer en cada uno de los casos.

Este estudio nos da mas información sobre lo importante que es un algoritmo y que para bajar tiempos de ejecución lo mejor es invertir en realizar un algoritmo pensado para los peores y los casos mas probables ya que son en estos en los cuales los tiempos se nos pueden disparar.

Si los comparamos podemos ver que el algoritmo de inserción es más rápido en el mejor caso pero en los demás es más rápido el shell. Esto nos podría indicar que una "mezcla" de ambos nos podría dar como resultado un algorimo mucho más rápido para el conjunto de los casos.











