INFORME P4 ALGORITMOS: Ordenación rápida******************************************************************************************
Autores: Telmo Fernández Corujo, Anna Taboada Pardiñas y Andrés Pérez Comesaña.

En esta práctica vamos a implementar la función de Ordenación rápida (Quicksort)
y vamos a comparar los tiempos de ejecución resultantes al ordenar vectores con
distintas situaciones iniciales(vector ordenado ascendentemente, vector ordenado
descendentemente y un vector desordenado), así mismo los vectores deberán tener 
distintos tamaños y ubrales(1, 10 y 100).

Las especificaciones de la máquina que vamos a utilizar son las siguientes:
OS: Ubuntu 18.04.5 LTS x86_64 
Host: GL62M 7RDX REV:1.0 
Kernel: 5.4.0-48-generic 
Uptime: 4 hours, 15 mins 
Packages: 1922 
Shell: bash 4.4.20 
Resolution: 1920x1080 
DE: MATE 
WM: Metacity (Marco) 
WM Theme: Radiant-MATE-Aqua 
Theme: Radiant-MATE-Aqua [GTK2/3] 
Icons: Radiant-MATE-Aqua [GTK2/3] 
Terminal: mate-terminal 
Terminal Font: Ubuntu Mono 13 
CPU: Intel i5-7300HQ (4) @ 3.500GHz 
GPU: Intel Integrated Graphics 
GPU: NVIDIA GeForce GTX 1050 Mobile 
Memory: 2371MiB / 7880MiB

Las unidades de tiempo utilizadas son los microsegundos (us).

*********************************************************************************
ALGORIMO DE ORDENACIÓN RÁPIDA (QUICKSORT): este algoritmo trabaja de la siguiente 
forma: elegimos un elemento al que llamamos pivote, resituamos todos los elementos
del vector entorno al pivote, de manera que los menores que le queden al lado izquerdo
y los mayores a su derecha. A continuación separamos el vector en dos subvectores y le
aplicamos recursivamente el proceso de Ordenación rápida. Se trata de un algoritmo de
complejidad O(nlogn) en el mejor caso, O(n²) en el peor caso y en el caso medio o(nlogn).


MEDICIONES CON UMBRAL=1------------------------------------------------------------------

VECTOR ALEATORIO

La complejidad en este caso sería n^1.08
Las cotas subestimada, ajustada y sobreestimada son:
	f(n)=n^1.00;
	g(n)=n^1.08; 
	h(n)=n^1.18;
La progresión geométrica es *2.
La constante a la que tiende la sucesión de la cota ajustada es 0.064.
El programa nos muestra por pantalla:

						subestimada		ajustada		sobreestimada
vector aleatorio
n		t(n)			t(n)/n^1.00		t(n)/n^1.08		t(n)/n^1.18
512 	*  184.9200		0.36117187		0.21926652		0.11750202	
1024	*  173.0800		0.16902344		0.09707847		0.04853924	
2048	*  240.7900		0.11757324		0.06388547		0.02980363	
4096	   552.0000		0.13476562		0.06527720		0.03015465	
8192	  1012.0000		0.12353516		0.06207854		0.02439947	
16384	  2310.0000		0.14099121		0.06486919		0.02458082	
32768	  4958.0000		0.15130615		0.06585983		0.02328497	
65536	 10323.0000		0.15751648		0.06486458		0.02139733	

Las dos primeras filas presentan valores anómalos y las hemos ignorado.


VECTOR ORDENADO ASCENDENTEMENTE
La complejidad en este caso sería n^1.08
Las cotas subestimada, ajustada y sobreestimada son:
	f(n)=n^1.00;
	g(n)=n^1.08; 
	h(n)=n^1.18;
La progresión geométrica es *2.
La constante a la que tiende la sucesión de la cota ajustada es 0.037.
El programa nos muestra por pantalla:

vector ascendente
n		t(n)			t(n)/n^1.00		t(n)/n^1.08		t(n)/n^1.18
512 	*   31.5000		0.06152344		0.03735072		0.02001576	
1024	*   67.6000		0.06601562		0.03791602		0.01895801	
2048	*  146.7800		0.07166992		0.03894310		0.01816760	
4096	*  294.6000		0.07192383		0.03697294		0.01609341	
8192	   686.0000		0.08374023		0.03972518		0.01653956	
16384	  1203.0000		0.07342529		0.03378252		0.01280118	
32768	  2591.0000		0.07907104		0.03441767		0.01216848	
65536	  5684.0000		0.08673096		0.03571542		0.01178169


VECTOR ORDENADO DESCENDENTEMENTE
La complejidad en este caso sería n^1.08
Las cotas subestimada, ajustada y sobreestimada son:
	f(n)=n^1.00;
	g(n)=n^1.08; 
	h(n)=n^1.18;
La progresión geométrica es *2.
La constante a la que tiende la sucesión de la cota ajustada es 0.037.
El programa nos muestra por pantalla:
vector descendente
n		t(n)			t(n)/n^1.00		t(n)/n^1.08		t(n)/n^1.18
512 	*   33.1100		0.06466797		0.03925976		0.02103878	
1024	*   66.4800		0.06492188		0.03728783		0.01864391	
2048	*  144.3200		0.07046875		0.03829042		0.01786311	
4096	*  300.1100		0.07326904		0.03766446		0.01639441	
8192	   617.0000		0.07531738		0.03662891		0.01487596	
16384	  1451.0000		0.08856201		0.03974683		0.01544016	
32768	  2656.0000		0.08105469		0.03528110		0.01247375	
65536	  5746.0000		0.08767700		0.03610500		0.01191021	


MEDICIONES UMBRAL=10--------------------------------------------------

VECTOR ALEATORIO
La complejidad en este caso sería n^1.10
Las cotas subestimada, ajustada y sobreestimada son:
	f(n)=n^1.00;
	g(n)=n^1.10; 
	h(n)=n^1.20;
La progresión geométrica es *2.
La constante a la que tiende la sucesión de la cota ajustada es 0.046.
El programa nos muestra por pantalla:
						subestimada		ajustada		sobreestimada
vector aleatorio
n		t(n)			t(n)/n^1.00		t(n)/n^1.10		t(n)/n^1.20
512 	*   40.3300		0.07876953		0.04421155		0.02262061	
1024	*   98.7600		0.09644531		0.04822266		0.02411133	
2048	*  214.2300		0.10460449		0.04879972		0.02276587	
4096	*  439.0600		0.10719238		0.04665819		0.02030916	
8192	   998.0000		0.12182617		0.04947680		0.02009382	
16384	  1971.0000		0.12030029		0.04558529		0.01727359	
32768	  4570.0000		0.13946533		0.04930844		0.01743317	
65536	  9307.0000		0.14201355		0.04684700		0.01545375	


VECTOR ORDENADO ASCENDENTEMENTE
La complejidad en este caso sería n^1.10
Las cotas subestimada, ajustada y sobreestimada son:
	f(n)=n^1.00;
	g(n)=n^1.10; 
	h(n)=n^1.20;
La progresión geométrica es *2.
La constante a la que tiende la sucesión de la cota ajustada es 0.018.
El programa nos muestra por pantalla:
n		t(n)			t(n)/n^1.00		t(n)/n^1.10		t(n)/n^1.20
512 	*   16.3100		0.03185547		0.01707092		0.00914808	
1024	*   37.7300		0.03684570		0.01842285		0.00921143	
2048	*   80.4500		0.03928223		0.01832581		0.00854929	
4096	*  176.0800		0.04298828		0.01871174		0.00814476	
8192	*  383.0600		0.04676025		0.01899056		0.00771257	
16384	   806.0000		0.04919434		0.01864117		0.00706368	
32768	  1631.0000		0.04977417		0.01759783		0.00622177	
65536	  3669.0000		0.05598450		0.01846800		0.00609217	


VECTOR ORDENADO DESCENDENTEMENTE
La complejidad en este caso sería n^1.10
Las cotas subestimada, ajustada y sobreestimada son:
	f(n)=n^1.00;
	g(n)=n^1.10; 
	h(n)=n^1.20;
La progresión geométrica es *2.
La constante a la que tiende la sucesión de la cota ajustada es 0.021.
El programa nos muestra por pantalla:
n		t(n)			t(n)/n^1.00		t(n)/n^1.10		t(n)/n^1.20
512 	*   20.5500		0.04013672		0.02150874		0.01152625	
1024	*   44.3100		0.04327148		0.02163574		0.01081787	
2048	*   90.0700		0.04397949		0.02051716		0.00957159	
4096	*  196.1900		0.04789795		0.02084879		0.00907496	
8192	   550.0000		0.06713867		0.02726677		0.01107375	
16384	   975.0000		0.05950928		0.02254980		0.00854478	
32768	  1847.0000		0.05636597		0.01992838		0.00704575	
65536	  4058.0000		0.06192017		0.02042604		0.00673808	


UMBRAL=100------------------------------------------------------------
VECTOR ALEATORIO
La complejidad en este caso sería n^1.11
Las cotas subestimada, ajustada y sobreestimada son:
	f(n)=n^1.00;
	g(n)=n^1.11; 
	h(n)=n^1.21;
La progresión geométrica es *2.
La constante a la que tiende la sucesión de la cota ajustada es 0.045.
El programa nos muestra por pantalla:
						subestimada		ajustada		sobreestimada
vector aleatorio
n		t(n)			t(n)/n^1.00		t(n)/n^1.11		t(n)/n^1.21
512 	*   47.1200		0.09203125		0.04633569		0.02483068	
1024	*  100.7800		0.09841797		0.04591361		0.02295680	
2048	*  220.0400		0.10744141		0.04644355		0.02166668	
4096	*  470.5900		0.11489014		0.04601751		0.02003029	
8192	   923.0000		0.11267090		0.04181565		0.01698243	
16384	  2313.0000		0.14117432		0.04854779		0.01839617	
32768	  4538.0000		0.13848877		0.04412808		0.01560163	
65536	  9956.0000		0.15191650		0.04485307		0.01479599


VECTOR ORDENADO ASCENDENTEMENTE
La complejidad en este caso sería n^1.11
Las cotas subestimada, ajustada y sobreestimada son:
	f(n)=n^1.00;
	g(n)=n^1.11; 
	h(n)=n^1.21;
La progresión geométrica es *2.
La constante a la que tiende la sucesión de la cota ajustada es 0.010.
El programa nos muestra por pantalla:
vector ascendente
n		t(n)			t(n)/n^1.00		t(n)/n^1.11		t(n)/n^1.21
512 	*    7.6500		0.01494141		0.00752267		0.00403130	
1024	*   18.2900		0.01786133		0.00833260		0.00416630	
2048	*   47.6100		0.02324707		0.01004898		0.00468801	
4096	*   95.0600		0.02320801		0.00929562		0.00404615	
8192	*  238.4800		0.02911133		0.01080411		0.00438783	
16384	   512.0000		0.03125000		0.01074642		0.00407213	
32768	  1123.0000		0.03427124		0.01092019		0.00386087	
65536	  2388.0000		0.03643799		0.01075825		0.00354890	

Las dos primeras filas presentan valores anómalos y las hemos ignorado.


VECTOR ORDENADO DESCENDENTEMENTE
La complejidad en este caso sería n^1.08
Las cotas subestimada, ajustada y sobreestimada son:
	f(n)=n^1.00;
	g(n)=n^1.11; 
	h(n)=n^1.21;
La progresión geométrica es *2.
La constante a la que tiende la sucesión de la cota ajustada es 0.012.
El programa nos muestra por pantalla:
vector descendente
n		t(n)			t(n)/n^1.00		t(n)/n^1.11		t(n)/n^1.21
512 	*   12.0400		0.02351562		0.01183959		0.00634468	
1024	*   28.3900		0.02772461		0.01293399		0.00646699	
2048	*   61.5400		0.03004883		0.01298917		0.00605966	
4096	*  121.4400		0.02964844		0.01187524		0.00516900	
8192	*  271.1600		0.03310059		0.01228465		0.00498912	
16384	   967.0000		0.04002100		0.01329646		0.00469092	
32768	  1326.0000		0.04146631		0.01289419		0.00455878	
65536	  2822.0000		0.04306030		0.01271348		0.00419388	


CONCLUSIÓN****************************************************************************************************

En esta práctica hemos comprobado el efecto que tiene cambiar el umbral
en el algoritmo quicksort así como su comportamiento cuando el vector inicial
se encuentra en distintos estados (ordenado, aleatorio y descendente).

Se puede observar que el umbral que ha dado mejor resultado ha sido 10. Esto se
debe a que al seguir aumentando el umbral dependemos mas de la ordenación por insercion
que nos da peores resultados.

