INFORME P3 ALGORITMOS: Árboles binarios de búsqueda.
Autores: Telmo Fernández Corujo, Anna Taboada Pardiñas y Andrés Pérez Comesaña.

En esta práctica vamos a implementar las funciones de un árbol binario de búsqueda (insertar, crearArbol, esArbolVacio, buscar, eliminarArbol, hijoDerecho, hijoIzquierdo, elemento, numeroDeRepeticiones, altura y visualizar) y vamos a medir el tiempo de ejecución de las funciones buscar e insertar(proporcionada en el enunciado).


Las especificaciones de la máquina que vamos a utilizar son las siguientes:
OS: Ubuntu 18.04.5 LTS x86_64 
Host: GL62M 7RDX REV:1.0 
Kernel: 5.4.0-48-generic 
Uptime: 4 hours, 15 mins 
Packages: 1922 
Shell: bash 4.4.20 
Resolution: 1920x1080 
DE: MATE 
WM: Metacity (Marco) 
WM Theme: Radiant-MATE-Aqua 
Theme: Radiant-MATE-Aqua [GTK2/3] 
Icons: Radiant-MATE-Aqua [GTK2/3] 
Terminal: mate-terminal 
Terminal Font: Ubuntu Mono 13 
CPU: Intel i5-7300HQ (4) @ 3.500GHz 
GPU: Intel Integrated Graphics 
GPU: NVIDIA GeForce GTX 1050 Mobile 
Memory: 2371MiB / 7880MiB

Las unidades de tiempo utilizadas en esta práctica son los microsegundos (us).

****************************************************************************************************************************************************************************************************************
ALGORITMO BUSCAR: este algoritmo nos devuelve el nodo donde está el elemento que le hemos pasado junto con el árbol y devuelve NULL si no está en el árbol.

posicion buscar(int i, arbol a){
	if(a != NULL){
		if(i < a->elem){
			return buscar(i, a->izq);
		}else if(i > a->elem){
			return buscar(i, a->der);
		}else{
			return a;
		}
	}else{
		return NULL;
	}
}

La complejidad en este caso sería n^1.12
Las cotas subestimada, ajustada y sobreestimada son:
	f(n)=n^1.02;
	g(n)=n^1.12; 
	h(n)=n^1.22;
La progresión geométrica es *2.
La constante a la que tiende la sucesión de la cota ajustada es 0.022.
El programa nos muestra por pantalla:




****************************************************************************************************************************************************************************************************************
ALGORITMO INSERTAR: este algoritmo nos devuelve el el árbol con el elemento insertado.

arbol insertar(int e, arbol a){
	if (a == NULL)
		return crearnodo(e);
	else if (e < a->elem)
		a->izq = insertar (e, a->izq);
	else if (e> a->elem)
		a->der = insertar (e, a->der);
	else
		a->num_repeticiones++;
	return a;
}







